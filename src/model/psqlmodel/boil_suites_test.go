// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package psqlmodel

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Cars", testCars)
	t.Run("Orders", testOrders)
	t.Run("SchemaMigrations", testSchemaMigrations)
}

func TestSoftDelete(t *testing.T) {
	t.Run("Cars", testCarsSoftDelete)
	t.Run("Orders", testOrdersSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("Cars", testCarsQuerySoftDeleteAll)
	t.Run("Orders", testOrdersQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("Cars", testCarsSliceSoftDeleteAll)
	t.Run("Orders", testOrdersSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("Cars", testCarsDelete)
	t.Run("Orders", testOrdersDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Cars", testCarsQueryDeleteAll)
	t.Run("Orders", testOrdersQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Cars", testCarsSliceDeleteAll)
	t.Run("Orders", testOrdersSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Cars", testCarsExists)
	t.Run("Orders", testOrdersExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Cars", testCarsFind)
	t.Run("Orders", testOrdersFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Cars", testCarsBind)
	t.Run("Orders", testOrdersBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Cars", testCarsOne)
	t.Run("Orders", testOrdersOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Cars", testCarsAll)
	t.Run("Orders", testOrdersAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Cars", testCarsCount)
	t.Run("Orders", testOrdersCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Cars", testCarsHooks)
	t.Run("Orders", testOrdersHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Cars", testCarsInsert)
	t.Run("Cars", testCarsInsertWhitelist)
	t.Run("Orders", testOrdersInsert)
	t.Run("Orders", testOrdersInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Cars", testCarsReload)
	t.Run("Orders", testOrdersReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Cars", testCarsReloadAll)
	t.Run("Orders", testOrdersReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Cars", testCarsSelect)
	t.Run("Orders", testOrdersSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Cars", testCarsUpdate)
	t.Run("Orders", testOrdersUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Cars", testCarsSliceUpdateAll)
	t.Run("Orders", testOrdersSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
}
