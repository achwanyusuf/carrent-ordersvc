// Code generated by MockGen. DO NOT EDIT.
// Source: src/usecase/order/order.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	model "github.com/achwanyusuf/carrent-ordersvc/src/model"
	grpcmodel "github.com/achwanyusuf/carrent-ordersvc/src/model/grpcmodel"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderInterface is a mock of OrderInterface interface.
type MockOrderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderInterfaceMockRecorder
}

// MockOrderInterfaceMockRecorder is the mock recorder for MockOrderInterface.
type MockOrderInterfaceMockRecorder struct {
	mock *MockOrderInterface
}

// NewMockOrderInterface creates a new mock instance.
func NewMockOrderInterface(ctrl *gomock.Controller) *MockOrderInterface {
	mock := &MockOrderInterface{ctrl: ctrl}
	mock.recorder = &MockOrderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderInterface) EXPECT() *MockOrderInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderInterface) Create(ctx *gin.Context, v model.CreateOrder) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, v)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrderInterfaceMockRecorder) Create(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderInterface)(nil).Create), ctx, v)
}

// CreateGRPCProcess mocks base method.
func (m *MockOrderInterface) CreateGRPCProcess(ctx *context.Context, v *grpcmodel.CreateOrderRequest) (*grpcmodel.SingleOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGRPCProcess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGRPCProcess indicates an expected call of CreateGRPCProcess.
func (mr *MockOrderInterfaceMockRecorder) CreateGRPCProcess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGRPCProcess", reflect.TypeOf((*MockOrderInterface)(nil).CreateGRPCProcess), ctx, v)
}

// DeleteByID mocks base method.
func (m *MockOrderInterface) DeleteByID(ctx *gin.Context, id, vid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id, vid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockOrderInterfaceMockRecorder) DeleteByID(ctx, id, vid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockOrderInterface)(nil).DeleteByID), ctx, id, vid)
}

// DeleteByIDGRPCProccess mocks base method.
func (m *MockOrderInterface) DeleteByIDGRPCProccess(ctx *context.Context, v *grpcmodel.DeleteOrderRequest) (*grpcmodel.DeleteOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDGRPCProccess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.DeleteOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByIDGRPCProccess indicates an expected call of DeleteByIDGRPCProccess.
func (mr *MockOrderInterfaceMockRecorder) DeleteByIDGRPCProccess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDGRPCProccess", reflect.TypeOf((*MockOrderInterface)(nil).DeleteByIDGRPCProccess), ctx, v)
}

// GetByID mocks base method.
func (m *MockOrderInterface) GetByID(ctx *gin.Context, cacheControl string, id int64) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, cacheControl, id)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrderInterfaceMockRecorder) GetByID(ctx, cacheControl, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrderInterface)(nil).GetByID), ctx, cacheControl, id)
}

// GetByIDGRPCProcess mocks base method.
func (m *MockOrderInterface) GetByIDGRPCProcess(ctx *context.Context, v *grpcmodel.GetOrderByIDRequest) (*grpcmodel.SingleOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDGRPCProcess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDGRPCProcess indicates an expected call of GetByIDGRPCProcess.
func (mr *MockOrderInterfaceMockRecorder) GetByIDGRPCProcess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDGRPCProcess", reflect.TypeOf((*MockOrderInterface)(nil).GetByIDGRPCProcess), ctx, v)
}

// GetByParam mocks base method.
func (m *MockOrderInterface) GetByParam(ctx *gin.Context, cacheControl string, v model.GetOrdersByParam) ([]model.Order, model.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, cacheControl, v)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(model.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockOrderInterfaceMockRecorder) GetByParam(ctx, cacheControl, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockOrderInterface)(nil).GetByParam), ctx, cacheControl, v)
}

// GetByParamGRPCProcess mocks base method.
func (m *MockOrderInterface) GetByParamGRPCProcess(ctx *context.Context, v *grpcmodel.GetOrderByParamRequest) (*grpcmodel.GetOrderByParamReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParamGRPCProcess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.GetOrderByParamReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByParamGRPCProcess indicates an expected call of GetByParamGRPCProcess.
func (mr *MockOrderInterfaceMockRecorder) GetByParamGRPCProcess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParamGRPCProcess", reflect.TypeOf((*MockOrderInterface)(nil).GetByParamGRPCProcess), ctx, v)
}

// UpdateByID mocks base method.
func (m *MockOrderInterface) UpdateByID(ctx *gin.Context, id int64, v model.UpdateOrder) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, v)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockOrderInterfaceMockRecorder) UpdateByID(ctx, id, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockOrderInterface)(nil).UpdateByID), ctx, id, v)
}

// UpdateByIDGRPCProcess mocks base method.
func (m *MockOrderInterface) UpdateByIDGRPCProcess(ctx *context.Context, v *grpcmodel.UpdateOrderRequest) (*grpcmodel.SingleOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByIDGRPCProcess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByIDGRPCProcess indicates an expected call of UpdateByIDGRPCProcess.
func (mr *MockOrderInterfaceMockRecorder) UpdateByIDGRPCProcess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByIDGRPCProcess", reflect.TypeOf((*MockOrderInterface)(nil).UpdateByIDGRPCProcess), ctx, v)
}
