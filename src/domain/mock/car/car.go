// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/car/car.go

// Package mock_car is a generated GoMock package.
package mock_car

import (
	context "context"
	reflect "reflect"

	model "github.com/achwanyusuf/carrent-ordersvc/src/model"
	grpcmodel "github.com/achwanyusuf/carrent-ordersvc/src/model/grpcmodel"
	psqlmodel "github.com/achwanyusuf/carrent-ordersvc/src/model/psqlmodel"
	gomock "github.com/golang/mock/gomock"
)

// MockCarInterface is a mock of CarInterface interface.
type MockCarInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCarInterfaceMockRecorder
}

// MockCarInterfaceMockRecorder is the mock recorder for MockCarInterface.
type MockCarInterfaceMockRecorder struct {
	mock *MockCarInterface
}

// NewMockCarInterface creates a new mock instance.
func NewMockCarInterface(ctrl *gomock.Controller) *MockCarInterface {
	mock := &MockCarInterface{ctrl: ctrl}
	mock.recorder = &MockCarInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarInterface) EXPECT() *MockCarInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCarInterface) Delete(ctx *context.Context, v *psqlmodel.Car, id int64, isHardDelete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, v, id, isHardDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCarInterfaceMockRecorder) Delete(ctx, v, id, isHardDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCarInterface)(nil).Delete), ctx, v, id, isHardDelete)
}

// DeleteGRPC mocks base method.
func (m *MockCarInterface) DeleteGRPC(ctx context.Context, v *grpcmodel.DeleteCarRequest) (*grpcmodel.DeleteCarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGRPC", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.DeleteCarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGRPC indicates an expected call of DeleteGRPC.
func (mr *MockCarInterfaceMockRecorder) DeleteGRPC(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGRPC", reflect.TypeOf((*MockCarInterface)(nil).DeleteGRPC), ctx, v)
}

// GetByIDGRPC mocks base method.
func (m *MockCarInterface) GetByIDGRPC(ctx context.Context, v *grpcmodel.GetCarByIDRequest) (*grpcmodel.SingleCarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDGRPC", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleCarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDGRPC indicates an expected call of GetByIDGRPC.
func (mr *MockCarInterfaceMockRecorder) GetByIDGRPC(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDGRPC", reflect.TypeOf((*MockCarInterface)(nil).GetByIDGRPC), ctx, v)
}

// GetByParam mocks base method.
func (m *MockCarInterface) GetByParam(ctx *context.Context, cacheControl string, param *model.GetCarsByParam) (psqlmodel.CarSlice, model.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, cacheControl, param)
	ret0, _ := ret[0].(psqlmodel.CarSlice)
	ret1, _ := ret[1].(model.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockCarInterfaceMockRecorder) GetByParam(ctx, cacheControl, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockCarInterface)(nil).GetByParam), ctx, cacheControl, param)
}

// GetCarByParam mocks base method.
func (m *MockCarInterface) GetCarByParam(ctx context.Context, v *grpcmodel.GetCarByParamRequest) (*grpcmodel.GetCarByParamReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarByParam", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.GetCarByParamReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarByParam indicates an expected call of GetCarByParam.
func (mr *MockCarInterfaceMockRecorder) GetCarByParam(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarByParam", reflect.TypeOf((*MockCarInterface)(nil).GetCarByParam), ctx, v)
}

// GetSingleByParam mocks base method.
func (m *MockCarInterface) GetSingleByParam(ctx *context.Context, cacheControl string, param *model.GetCarByParam) (psqlmodel.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleByParam", ctx, cacheControl, param)
	ret0, _ := ret[0].(psqlmodel.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleByParam indicates an expected call of GetSingleByParam.
func (mr *MockCarInterfaceMockRecorder) GetSingleByParam(ctx, cacheControl, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleByParam", reflect.TypeOf((*MockCarInterface)(nil).GetSingleByParam), ctx, cacheControl, param)
}

// Insert mocks base method.
func (m *MockCarInterface) Insert(ctx *context.Context, data *psqlmodel.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCarInterfaceMockRecorder) Insert(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCarInterface)(nil).Insert), ctx, data)
}

// InsertGRPC mocks base method.
func (m *MockCarInterface) InsertGRPC(ctx context.Context, v *grpcmodel.CreateCarRequest) (*grpcmodel.SingleCarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGRPC", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleCarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertGRPC indicates an expected call of InsertGRPC.
func (mr *MockCarInterfaceMockRecorder) InsertGRPC(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGRPC", reflect.TypeOf((*MockCarInterface)(nil).InsertGRPC), ctx, v)
}

// Update mocks base method.
func (m *MockCarInterface) Update(ctx *context.Context, v *psqlmodel.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCarInterfaceMockRecorder) Update(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCarInterface)(nil).Update), ctx, v)
}

// UpdateGRPC mocks base method.
func (m *MockCarInterface) UpdateGRPC(ctx context.Context, v *grpcmodel.UpdateCarRequest) (*grpcmodel.SingleCarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGRPC", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleCarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGRPC indicates an expected call of UpdateGRPC.
func (mr *MockCarInterfaceMockRecorder) UpdateGRPC(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGRPC", reflect.TypeOf((*MockCarInterface)(nil).UpdateGRPC), ctx, v)
}
