// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/order/order.go

// Package mock_order is a generated GoMock package.
package mock_order

import (
	context "context"
	reflect "reflect"

	model "github.com/achwanyusuf/carrent-ordersvc/src/model"
	grpcmodel "github.com/achwanyusuf/carrent-ordersvc/src/model/grpcmodel"
	psqlmodel "github.com/achwanyusuf/carrent-ordersvc/src/model/psqlmodel"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderInterface is a mock of OrderInterface interface.
type MockOrderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrderInterfaceMockRecorder
}

// MockOrderInterfaceMockRecorder is the mock recorder for MockOrderInterface.
type MockOrderInterfaceMockRecorder struct {
	mock *MockOrderInterface
}

// NewMockOrderInterface creates a new mock instance.
func NewMockOrderInterface(ctrl *gomock.Controller) *MockOrderInterface {
	mock := &MockOrderInterface{ctrl: ctrl}
	mock.recorder = &MockOrderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderInterface) EXPECT() *MockOrderInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockOrderInterface) Delete(ctx *context.Context, v *psqlmodel.Order, id int64, isHardDelete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, v, id, isHardDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderInterfaceMockRecorder) Delete(ctx, v, id, isHardDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderInterface)(nil).Delete), ctx, v, id, isHardDelete)
}

// DeleteGRPC mocks base method.
func (m *MockOrderInterface) DeleteGRPC(ctx context.Context, v *grpcmodel.DeleteOrderRequest) (*grpcmodel.DeleteOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGRPC", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.DeleteOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGRPC indicates an expected call of DeleteGRPC.
func (mr *MockOrderInterfaceMockRecorder) DeleteGRPC(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGRPC", reflect.TypeOf((*MockOrderInterface)(nil).DeleteGRPC), ctx, v)
}

// GetByIDGRPC mocks base method.
func (m *MockOrderInterface) GetByIDGRPC(ctx context.Context, v *grpcmodel.GetOrderByIDRequest) (*grpcmodel.SingleOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDGRPC", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDGRPC indicates an expected call of GetByIDGRPC.
func (mr *MockOrderInterfaceMockRecorder) GetByIDGRPC(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDGRPC", reflect.TypeOf((*MockOrderInterface)(nil).GetByIDGRPC), ctx, v)
}

// GetByParam mocks base method.
func (m *MockOrderInterface) GetByParam(ctx *context.Context, cacheControl string, param *model.GetOrdersByParam) (psqlmodel.OrderSlice, model.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, cacheControl, param)
	ret0, _ := ret[0].(psqlmodel.OrderSlice)
	ret1, _ := ret[1].(model.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockOrderInterfaceMockRecorder) GetByParam(ctx, cacheControl, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockOrderInterface)(nil).GetByParam), ctx, cacheControl, param)
}

// GetOrderByParam mocks base method.
func (m *MockOrderInterface) GetOrderByParam(ctx context.Context, v *grpcmodel.GetOrderByParamRequest) (*grpcmodel.GetOrderByParamReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByParam", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.GetOrderByParamReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByParam indicates an expected call of GetOrderByParam.
func (mr *MockOrderInterfaceMockRecorder) GetOrderByParam(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByParam", reflect.TypeOf((*MockOrderInterface)(nil).GetOrderByParam), ctx, v)
}

// GetSingleByParam mocks base method.
func (m *MockOrderInterface) GetSingleByParam(ctx *context.Context, cacheControl string, param *model.GetOrderByParam) (psqlmodel.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleByParam", ctx, cacheControl, param)
	ret0, _ := ret[0].(psqlmodel.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleByParam indicates an expected call of GetSingleByParam.
func (mr *MockOrderInterfaceMockRecorder) GetSingleByParam(ctx, cacheControl, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleByParam", reflect.TypeOf((*MockOrderInterface)(nil).GetSingleByParam), ctx, cacheControl, param)
}

// Insert mocks base method.
func (m *MockOrderInterface) Insert(ctx *context.Context, data *psqlmodel.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockOrderInterfaceMockRecorder) Insert(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrderInterface)(nil).Insert), ctx, data)
}

// InsertGRPC mocks base method.
func (m *MockOrderInterface) InsertGRPC(ctx context.Context, v *grpcmodel.CreateOrderRequest) (*grpcmodel.SingleOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGRPC", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertGRPC indicates an expected call of InsertGRPC.
func (mr *MockOrderInterfaceMockRecorder) InsertGRPC(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGRPC", reflect.TypeOf((*MockOrderInterface)(nil).InsertGRPC), ctx, v)
}

// Update mocks base method.
func (m *MockOrderInterface) Update(ctx *context.Context, v *psqlmodel.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderInterfaceMockRecorder) Update(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderInterface)(nil).Update), ctx, v)
}

// UpdateGRPC mocks base method.
func (m *MockOrderInterface) UpdateGRPC(ctx context.Context, v *grpcmodel.UpdateOrderRequest) (*grpcmodel.SingleOrderReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGRPC", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleOrderReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGRPC indicates an expected call of UpdateGRPC.
func (mr *MockOrderInterfaceMockRecorder) UpdateGRPC(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGRPC", reflect.TypeOf((*MockOrderInterface)(nil).UpdateGRPC), ctx, v)
}
