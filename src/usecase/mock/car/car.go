// Code generated by MockGen. DO NOT EDIT.
// Source: src/usecase/car/car.go

// Package mock_car is a generated GoMock package.
package mock_car

import (
	context "context"
	reflect "reflect"

	model "github.com/achwanyusuf/carrent-ordersvc/src/model"
	grpcmodel "github.com/achwanyusuf/carrent-ordersvc/src/model/grpcmodel"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockCarInterface is a mock of CarInterface interface.
type MockCarInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCarInterfaceMockRecorder
}

// MockCarInterfaceMockRecorder is the mock recorder for MockCarInterface.
type MockCarInterfaceMockRecorder struct {
	mock *MockCarInterface
}

// NewMockCarInterface creates a new mock instance.
func NewMockCarInterface(ctrl *gomock.Controller) *MockCarInterface {
	mock := &MockCarInterface{ctrl: ctrl}
	mock.recorder = &MockCarInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarInterface) EXPECT() *MockCarInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarInterface) Create(ctx *gin.Context, v model.CreateCar) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, v)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCarInterfaceMockRecorder) Create(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarInterface)(nil).Create), ctx, v)
}

// CreateGRPCProcess mocks base method.
func (m *MockCarInterface) CreateGRPCProcess(ctx *context.Context, v *grpcmodel.CreateCarRequest) (*grpcmodel.SingleCarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGRPCProcess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleCarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGRPCProcess indicates an expected call of CreateGRPCProcess.
func (mr *MockCarInterfaceMockRecorder) CreateGRPCProcess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGRPCProcess", reflect.TypeOf((*MockCarInterface)(nil).CreateGRPCProcess), ctx, v)
}

// DeleteByID mocks base method.
func (m *MockCarInterface) DeleteByID(ctx *gin.Context, id, vid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id, vid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockCarInterfaceMockRecorder) DeleteByID(ctx, id, vid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCarInterface)(nil).DeleteByID), ctx, id, vid)
}

// DeleteByIDGRPCProccess mocks base method.
func (m *MockCarInterface) DeleteByIDGRPCProccess(ctx *context.Context, v *grpcmodel.DeleteCarRequest) (*grpcmodel.DeleteCarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIDGRPCProccess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.DeleteCarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByIDGRPCProccess indicates an expected call of DeleteByIDGRPCProccess.
func (mr *MockCarInterfaceMockRecorder) DeleteByIDGRPCProccess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIDGRPCProccess", reflect.TypeOf((*MockCarInterface)(nil).DeleteByIDGRPCProccess), ctx, v)
}

// GetByID mocks base method.
func (m *MockCarInterface) GetByID(ctx *gin.Context, cacheControl string, id int64) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, cacheControl, id)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCarInterfaceMockRecorder) GetByID(ctx, cacheControl, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCarInterface)(nil).GetByID), ctx, cacheControl, id)
}

// GetByIDGRPCProcess mocks base method.
func (m *MockCarInterface) GetByIDGRPCProcess(ctx *context.Context, v *grpcmodel.GetCarByIDRequest) (*grpcmodel.SingleCarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDGRPCProcess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleCarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDGRPCProcess indicates an expected call of GetByIDGRPCProcess.
func (mr *MockCarInterfaceMockRecorder) GetByIDGRPCProcess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDGRPCProcess", reflect.TypeOf((*MockCarInterface)(nil).GetByIDGRPCProcess), ctx, v)
}

// GetByParam mocks base method.
func (m *MockCarInterface) GetByParam(ctx *gin.Context, cacheControl string, v model.GetCarsByParam) ([]model.Car, model.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, cacheControl, v)
	ret0, _ := ret[0].([]model.Car)
	ret1, _ := ret[1].(model.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockCarInterfaceMockRecorder) GetByParam(ctx, cacheControl, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockCarInterface)(nil).GetByParam), ctx, cacheControl, v)
}

// GetByParamGRPCProcess mocks base method.
func (m *MockCarInterface) GetByParamGRPCProcess(ctx *context.Context, v *grpcmodel.GetCarByParamRequest) (*grpcmodel.GetCarByParamReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParamGRPCProcess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.GetCarByParamReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByParamGRPCProcess indicates an expected call of GetByParamGRPCProcess.
func (mr *MockCarInterfaceMockRecorder) GetByParamGRPCProcess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParamGRPCProcess", reflect.TypeOf((*MockCarInterface)(nil).GetByParamGRPCProcess), ctx, v)
}

// UpdateByID mocks base method.
func (m *MockCarInterface) UpdateByID(ctx *gin.Context, id int64, v model.UpdateCar) (model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, v)
	ret0, _ := ret[0].(model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockCarInterfaceMockRecorder) UpdateByID(ctx, id, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockCarInterface)(nil).UpdateByID), ctx, id, v)
}

// UpdateByIDGRPCProcess mocks base method.
func (m *MockCarInterface) UpdateByIDGRPCProcess(ctx *context.Context, v *grpcmodel.UpdateCarRequest) (*grpcmodel.SingleCarReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByIDGRPCProcess", ctx, v)
	ret0, _ := ret[0].(*grpcmodel.SingleCarReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByIDGRPCProcess indicates an expected call of UpdateByIDGRPCProcess.
func (mr *MockCarInterfaceMockRecorder) UpdateByIDGRPCProcess(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByIDGRPCProcess", reflect.TypeOf((*MockCarInterface)(nil).UpdateByIDGRPCProcess), ctx, v)
}
